Dependencies : 
 * ghc 7.10.2
 * Lots of cabal packages


ICFP contest 2015 submission
Team <$><*>

To solve an instance of the problem, we build a tree whose nodes at depth n are game positions after
placing n units. We limit its branching factor to B by picking the best children (higher scores are
better, lower filled areas are better, ). We choose a path by looking at depth D children. B and D
depend on the time limit parameter.

Direct children of a node are computed by a breadth first search on the (pivot position, rotation)
space (the graph is precomputed).

To optimize power phrases, we build the Aho-Corasick automaton from the known phrases. Let S be its
state space. We build an automaton whose state space is (S -> (N, char list)).
If we consider languages generated by (empty language, singleton language, language concatenation,
language union), this automaton is able to find the word which gives the best score from power
phrases.

The time complexity is (total power phrase length ^ 2 + max unit size) * width * height * source length * B ^ D.


